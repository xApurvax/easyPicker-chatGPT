import React, { useState, useEffect, useRef } from 'react'
import { useSelector, useDispatch } from "react-redux";
import { setGenerateHeadlineEffect,setSaveResult,setReGenerate } from "../../redux/slices/buttonEffectSlice";
import { ThreeDots } from 'react-loader-spinner'
import CustomCreateTag from "../main/CustomCreateTag";
import { FaBookmark } from 'react-icons/fa';
import toast, { Toaster } from 'react-hot-toast';
import { FaRegCopy } from 'react-icons/fa';
import { BsCheck2 } from 'react-icons/bs';
import {generateHeadlineFetchAPi} from "../../redux/slices/generateHeadlineSlice";
import logo from "../../assets/recycle.svg";
import { Formik } from 'formik'
import InputField from "../form/InputField";
import CustomButton from "../form/CustomButton";
import { LoginValidationSchema } from '../../utils/FormValidations';
import { loginFetchAPi } from '../../redux/slices/auth/loginSlice';

const CustomForm = ({tool,login,register}) => {
//   const dispatch = useDispatch();
//   const[count,setCount] = useState(0)
//   const [hasArticle, setHasArticle] = useState("");
// //   const [login,setLogin] = useState(true)
//   const [latestCopied,setLatestCopied]=useState({
//     copiedId:null,
//     })
//   const[tag,setTag] = useState([])
//   const { generateHeadlineEffect,isLoading,saveResult,reGenerate,allTitles,specialTags,hasTitleTag,copyAllSpecialTags,token,isSuccess } = useSelector((state) => ({
//     generateHeadlineEffect: state.buttonEffectSlice.generateHeadlineEffect,
//     saveResult: state.buttonEffectSlice.saveResult,
//     reGenerate: state.buttonEffectSlice.reGenerate,
//     isLoading: state.generateHeadlineSlice.isLoading,
//     allTitles: state.generateHeadlineSlice.allTitles,
//     specialTags: state.generateHeadlineSlice.specialTags,
//     hasTitleTag: state.generateHeadlineSlice.hasTitleTag,
//     copyAllSpecialTags: state.generateHeadlineSlice.copyAllSpecialTags,
//     token: state.loginSlice.allData?.token?.access,
//     isSuccess: state.loginSlice.isSuccess,
//   }));

//   const [counter,setCounter] = useState([
//     {countValue : 1 ,id:1},
//     {countValue : 3 ,id:2},
//     {countValue : 5 ,id:3},
//     {countValue : 7 ,id:4},
//     {countValue : 10 ,id:5},
//   ]);

//   const [ counterSelected, setCounterSelected ] = useState({selected:false,id:null});

//   const [copyAllId,setCopyAllId] = useState({id:specialTags?.length + allTitles?.length + 1})
//   useEffect(() => {
//     allTitles && specialTags && setCopyAllId({id:allTitles?.length + specialTags?.length +1})
//   }, [copyAllId,latestCopied])
  
 

//   const handleChange = (e) => {
//     setHasArticle(e.target.value);
//   };

//   const handleSubmit = (e) => {
//     e.preventDefault()
//     dispatch(generateHeadlineFetchAPi({
//       heading_type: tag.join(","),
//       paragraph : hasArticle,
//       num_headers : count,
//     }))
//   };

//   const initialValues = { username: "", password: "" };
//   const handleLoginSubmit = (values) => {
//       dispatch(loginFetchAPi(values));
//       // console.log(values,"ffffffffffffffffffff")
//   }
//   useEffect(() => {
//     // // console.log(copyTag,"qqqqqqqqqqqq")
//   }, [token])
  

  return (
    <div>
     {/* <form onSubmit={(e) => { e.preventDefault();handleSubmit(e)}}> */}
    <Toaster
        position="top-right"
        reverseOrder={false}
    />
    <div className='bg-white relative z-10 rounded-xl mx-auto max-w-6xl'>
        <div className='flex p-5 gap-8'>
            {tool}
            {token || token !== undefined ? 
            <div className='flex flex-col gap-3'>
                <div className='flex flex-col'>
                    <div className=''>
                    <p className='font-medium text-sm text-[#4A5568]'>Put your article text below</p>
                    <textarea
                        className="resize-none p-3 my-2 bg-[#EDF2F7] border-[1px] rounded-md border-solid border-[#f8f8f8] text-[14px] focus:outline-none focus:border-[1px] focus:border-solid focus:border-[#aab2b8] focus:rounded-md scrollbar-thumb-transparent scrollbar-track-transparent group-hover:scrollbar-thumb-[#c3c3c3] group-hover:scrollbar-track-[#ededed] scrollbar-thin scrollbar-thumb-rounded-full scrollbar-track-rounded-full scrollbar-thumb-opacity-0.3 disabled:cursor-not-allowed"
                        rows={10}
                        cols={90}
                        disabled={isLoading}
                        id="paragraph"
                        name="paragraph"
                        type="text"
                        value={hasArticle}
                        placeholder="Type in or copy and paste your text/articale"
                        onChange={(e) => {
                        handleChange(e);
                        }}
                    />
                    </div>
                    <div className=''>
                        <p className='font-medium text-sm text-[#4A5568]'>Keywords to Include in Headline</p>
                        <div className='my-2'>
                        <CustomCreateTag  disabled = {isLoading} tags={tag} setTags={setTag}/>
                        </div>
                    </div>
                    <div className=''>
                        <p className='font-medium text-sm text-[#4A5568]'>No of Headlines</p>
                        <div className='flex gap-2 my-2'>
                            {counter && counter.map((data,id) => (
                                <>
                                    <button key={id} 
                                        disabled={isLoading}
                                        onClick={(e) => {
                                        e.preventDefault()
                                        setCount(data.countValue);
                                        setCounterSelected({selected:true,id:id});
                                    }} 
                                        className={`${counterSelected.id == id && data.countValue == count ? "bg-[#544BB9] text-white font-bold":"bg-[#EDF2F7] text-[#000000]"} flex items-center justify-center w-11 h-11  rounded-md cursor-pointer disabled:cursor-not-allowed`}>
                                            {data.countValue}
                                    </button>
                                </>
                            ))}
                        </div>
                    </div>
                </div>
                <div>
                    <button 
                    type='submit'
                    disabled={hasArticle.trim() ==="" || count == 0 || isLoading}
                    className={`${
                        generateHeadlineEffect && "animate-wiggle"
                        } flex items-center justify-center px-4 py-3 rounded-md bg-[#544BB9] text-[#E3E3E3] hover:text-white font-medium text-sm disabled:bg-[#2D3748] disabled:cursor-not-allowed w-1/4`}
                        onClick={(e) => {
                        dispatch(setGenerateHeadlineEffect(true));
                        handleSubmit(e);
                        // setHasArticle(hasArticle)
                        // setEdit(false)
                        }}
                        onAnimationEnd={() => {
                        dispatch(setGenerateHeadlineEffect(false));
                        }}
                    >{!isLoading ?
                        "Generate Headlines" :
                        <ThreeDots 
                          height="20" 
                          width="35" 
                          radius="9"
                          color="#fafafa" 
                          ariaLabel="three-dots-loading"
                          wrapperStyle={{}}
                          wrapperClassName=""
                          visible={true}
                          /> 
                          }</button>
                </div>
            </div> :
            <div className='flex flex-col gap-4 h-full w-full justify-center items-center py-10'>
            <Formik
                    initialValues={initialValues}
                    validationSchema={LoginValidationSchema}
                    validateOnBlur={false}
                    validateOnChange={false}
                    onSubmit={handleLoginSubmit}
                >
                    {({ handleSubmit }) =>
                    (<form className='w-full max-w-md' onSubmit={handleSubmit} >
                        <div className='w-full h-full flex flex-col gap-8 justify-center items-start'>
                            <div className='flex items-start'>
                                <p className='font-medium text-3xl'>Log in</p>
                            </div>
                            <div className='flex flex-col gap-10 items-start w-full'>
                            <InputField
                            type='text'
                            id='username'
                            name='username'
                            inputstyle='w-full  text-[#737373] text-xs 2xl:text-xl outline-none py-[14px] 2xl:py-[15px] rounded-md bg-[#EDF2F7] border border-[#FFFFFF]/[10%] pl-5 2xl:pl-6 placeholder:text-[#737373]'
                            borderstyle='w-full text-[#737373] text-xs 2xl:text-xl outline-none py-[14px] 2xl:py-[15px] rounded-2xl border border-red-500 bg-transparent pl-5 2xl:pl-6 placeholder:text-[#737373]'
                            placeholder='Username' />
                            <div className='flex flex-col gap-4 items-start w-full'>
                                <InputField
                                type='password'
                                id='password'
                                name='password'
                                inputstyle='w-full text-[#737373] text-xs 2xl:text-xl outline-none py-[14px] 2xl:py-[15px] rounded-md bg-[#EDF2F7] border border-[#FFFFFF]/[10%] pl-5 2xl:pl-6 placeholder:text-[#737373]'
                                borderstyle='w-full text-[#737373] text-xs 2xl:text-xl outline-none py-[14px] 2xl:py-[15px] rounded-2xl border border-red-500 bg-transparent pl-5 2xl:pl-6 placeholder:text-[#737373]'
                                placeholder='Password' />
                                <a className='flex items-center justify-end w-full font-semibold text-base text-[#4A5568]' href='/'>Forgot password?</a>
                            </div>
                            </div>
                            <div className='py-3 w-full'>
                            <CustomButton
                                type='submit'
                                disabled={isSuccess}
                                buttonStyle="w-full py-[12px] 2xl:py-[13px] text-base sm:text-sm lg:py-[12px] lg:text-[16px] 2xl:text-xl font-medium sm:font-medium rounded-md text-white bg-[#544BB9] shadow-lg"
                                loaderSize={20}
                                showLoader>
                                Log in
                            </CustomButton >
                            </div>
                        </div>
                    </form>)}
            </Formik>
                <div className='flex gap-1'>
                    <p className='font-normal text-sm text-[##7D7D7D]'>Don’t have an Account ? <a className='font-bold text-sm text-[#544BB9]' href='auth/signin'>Register</a>
                    </p>     
                </div>
            </div>}
            <div className='flex w-full max-w-[454px] justify-center items-start'>
                {token !== undefined || !token ?
                <div className='flex h-full justify-center items-center px-4'>
                    <p className='font-medium text-base text-[#4A5568]'>Log in/ Sign in first to access AI Headline Generator</p>
                </div>
                : hasTitleTag !== null ?
                <div className='flex flex-col gap-5 w-full'>
                     <div className='flex flex-col gap-1 w-full group'>
                         <p className='font-500 text-sm text-[#4A5568]'>Headlines</p>
                         <div className='border-[1px] border-solid border-[#EDF2F7] rounded-md p-2 max-h-[200px] scrollbar-thumb-transparent scrollbar-track-transparent group-hover:scrollbar-thumb-[#c3c3c3] group-hover:scrollbar-track-[#ededed] scrollbar-thin scrollbar-thumb-rounded-full scrollbar-track-rounded-full scrollbar-thumb-opacity-0.3'>
                             <div className='flex flex-col gap-2'>
                                 {allTitles && allTitles.map((title,id) => (
                                <div key={id} className='flex items-start justify-between'>
                                    <p className='font-medium text-sm text-[#4A5568] max-w-[360px]'>{title}</p>
                                    <button onClick={(e) => {  
                                        navigator.clipboard.writeText(title);
                                        setLatestCopied({copiedId: id});
                                        setCopyAllId({id:allTitles.length + specialTags.length +1})
                                        toast.success('Title Copied!')}} 
                                        type='button'>
                                            {latestCopied.copiedId == id ? 
                                            <p className='flex gap-1 items-center w-16 px-2 py-2 bg-[#544BB9] rounded-md text-[12px] leading-[14px] text-white'><BsCheck2 />copied</p>
                                            : 
                                            <p className='flex gap-1 items-center w-16 px-2 py-2 bg-[#EDF2F7] rounded-md text-[12px] leading-[14px] text-[#4A5568]'><FaRegCopy />copy</p>
                                            }
                                        </button>
                                </div>))}
                            </div>
                        </div>
                    </div>
                    <div className='flex flex-col gap-1 w-full'>
                        <div className='flex items-center gap-3'>
                            <p className='font-500 text-sm text-[#4A5568]'>Keywords</p>
                            <button onClick={() => {navigator.clipboard.writeText(copyAllSpecialTags);
                            setLatestCopied({copiedId:specialTags.length + allTitles.length + 1});
                            toast.success('All Tags Copied!')}} type='button' className={`px-2 py-1.5  rounded-md text-[12px] leading-[14px]  ${latestCopied.copiedId == copyAllId.id ? "bg-[#544BB9] text-white":"bg-[#EDF2F7] text-[#4A5568]" }`}>Copy All</button>
                        </div>
                        <div className='py-1'>  
                            <div className='flex gap-2 flex-wrap'>
                                {specialTags && specialTags.map((tag,id)=>(
                                <button onClick={(e) => {  
                                    navigator.clipboard.writeText(tag.trim());
                                    setLatestCopied({copiedId:id + allTitles.length});
                                    setCopyAllId({id:allTitles.length + specialTags.length +1})
                                    toast.success('Tag Copied!') }} 
                                    type='button' className={`${latestCopied.copiedId === id + allTitles.length ? "bg-[#544BB9] font-medium text-white":"bg-[#EDF2F7]"} px-3 py-2 border-[1px] border-solid border-[#EDF2F7] rounded-md text-xs text-[#4A5568]`}>{tag.trim()}</button>
                                ))} 
                            </div>
                        </div>
                    </div>
                    <div className='flex py-3 gap-4 w-full'>
                        <div>
                            <button
                             type='button'
                             className={`${
                                saveResult && "animate-wiggle"
                                } flex gap-2 px-4 py-2 rounded-md bg-[#544BB9] text-[#E3E3E3] hover:text-white font-medium text-sm disabled:bg-[#2D3748] disabled:cursor-not-allowed`}
                                onClick={(e) => {
                                    dispatch(setSaveResult(true));
                                }}
                                onAnimationEnd={() => {
                                    dispatch(setSaveResult(false));
                                }}
                                ><FaBookmark size={18} /> Save Results</button>
                        </div>
                        <div>
                            <button 
                            type='button'
                            className={`${
                                reGenerate && "animate-wiggle"
                                } flex gap-2 px-4 py-2 rounded-md bg-[#2D3748] text-[#E3E3E3] hover:text-white font-medium text-sm disabled:bg-[#544BB9] disabled:cursor-not-allowed`}
                                onClick={(e) => {
                                    dispatch(setReGenerate(true));
                                }}
                                onAnimationEnd={() => {
                                    dispatch(setReGenerate(false));
                                }}
                                > 
                                <img src={logo} alt="logo" className="w-5 cursor-pointer" />
                                    Regenerate</button>
                        </div>
                    </div>
                </div> 
                :
                <div className='flex h-full justify-center items-center px-4'>
                    <p className='font-medium text-base text-[#4A5568]'>Fill out the form to the left to generate content</p>
                </div>
               }
            </div>
        </div>
    </div>
    {/* </form> */}
    <div className="bg-[#544BB9] py-16 ms:py-8 sm:py-10 md:py-14 lg:py-16 h-full flex flex-col items-center justify-center w-full">
          <div className="flex flex-col justify-center items-center gap-1 ms:gap-5 lg:gap-16 ">
            <div className="flex justify-center items-center">
              <p className="font-bold text-xl ms:text-xl sm:text-4xl md:text-4xl lg:text-4xl text-center text-white">
              How Does AI Title Generator Work?
              </p>
            </div>
            <div className='grid grid-cols-2 ms:grid-cols-1 md:grid-cols-2 gap-4 ms:gap-4 sm:gap-6 md:gap-8 lg:gap-10 w-full h-full max-w-6xl'>
                <div className='relative z-[10] bg-white flex flex-col gap-3 rounded-2xl p-2 ms:p-5 sm:p-5 md:p-5 lg:p-6 overflow-hidden'>
                  <p className='font-bold text-lg ms:text-xs sm:text-base md:text-lg lg:text-2xl text-[#333333]'>Enter your blog / article</p>
                  <p className='font-normal text-lg ms:text-xs sm:text-base md:text-lg lg:text-2xl text-[#333333]'>Consider:</p>
                  <div className='py-2'>
                    <ul className='flex flex-col gap-2 font-normal text-lg ms:text-xs sm:text-base md:text-lg lg:text-2xl text-[#333333] list-disc px-4'>
                        <li>A high-level topic relevant to your audience</li>
                        <li>Your target keyword</li>
                        <li>A question or skill you’re teaching your audience about</li>
                    </ul>
                  </div>
                  <div className='absolute -top-1/4 -left-0 -z-[10]'>
                      <p className='text-[230px] ms:text-[120px] md:text-[230px] text-[#ede0ff]'>1</p>
                  </div>
                </div>
                <div className='relative z-[10] bg-white flex flex-col gap-3 rounded-2xl p-2 ms:p-5 sm:p-5 md:p-5 lg:p-6 overflow-hidden'>
                  {/* <p className='font-bold text-lg ms:text-xs sm:text-base md:text-lg lg:text-2xl text-[#333333]'>Enter your idea</p> */}
                  <p className='font-normal text-lg ms:text-xs sm:text-base md:text-lg lg:text-2xl text-[#333333]'>AI Title Generator will automatically deliver creative title suggestions in a variety of formats, including:</p>
                  <div className='py-2'>
                    <ul className='flex flex-col gap-2 font-normal text-lg ms:text-xs sm:text-base md:text-lg lg:text-2xl text-[#333333] list-disc px-4'>
                        <li>A high-level topic relevant to your audience</li>
                        <li>Your target keyword</li>
                        <li>A question or skill you’re teaching your audience about</li>
                    </ul>
                  </div>
                  <div className='absolute -top-1/4 -left-0 -z-[10]'>
                      <p className='text-[230px] ms:text-[120px] md:text-[230px] text-[#ede0ff]'>2</p>
                  </div>
                </div>
                <div className='relative z-[10] bg-white flex flex-col gap-3 rounded-2xl p-2 ms:p-5 sm:p-5 md:p-5 lg:p-6 overflow-hidden'>
                  {/* <p className='font-bold text-lg ms:text-xs sm:text-base md:text-lg lg:text-2xl text-[#333333]'>Enter your idea</p> */}
                  <p className='font-normal text-lg ms:text-xs sm:text-base md:text-lg lg:text-2xl text-[#333333]'>Pick your favorite options to add to your content plan, copy or download them as a spreadsheet.</p>
                  {/* <div className='py-2'>
                    <ul className='flex flex-col gap-2 font-normal text-lg ms:text-xs sm:text-base md:text-lg lg:text-2xl text-[#333333]'>
                        <li>A high-level topic relevant to your audience</li>
                        <li>Your target keyword</li>
                        <li>A question or skill you’re teaching your audience about</li>
                    </ul>
                  </div> */}
                  <div className='absolute -top-3/4 -left-0 -z-[10]'>
                      <p className='text-[230px] ms:text-[120px] md:text-[230px] text-[#ede0ff]'>3</p>
                  </div>
                </div>
                <div className='relative z-[10] bg-white flex flex-col gap-3 rounded-2xl p-2 ms:p-5 sm:p-5 md:p-5 lg:p-6 overflow-hidden'>
                  {/* <p className='font-bold text-lg ms:text-xs sm:text-base md:text-lg lg:text-2xl text-[#333333]'>Enter your idea</p> */}
                  <p className='font-normal text-lg ms:text-xs sm:text-base md:text-lg lg:text-2xl text-[#333333]'>Click on related ideas and generate new titles for each one.</p>
                  {/* <div className='py-2'>
                    <ul className='flex flex-col gap-2 font-normal text-lg ms:text-[8px] sm:text-base md:text-lg lg:text-2xl text-[#333333]'>
                        <li>A high-level topic relevant to your audience</li>
                        <li>Your target keyword</li>
                        <li>A question or skill you’re teaching your audience about</li>
                    </ul>
                  </div> */}
                  <div className='absolute -top-3/4 -left-0 -z-[10]'>
                      <p className='text-[230px] ms:text-[120px] md:text-[230px] text-[#ede0ff]'>4</p>
                  </div>
                </div>
            </div>
          </div>
        </div>
    </div>
  )
}

export default CustomForm

